// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: src/proto/Chunk.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "io.lionweb.protobuf";

export interface PBChunk {
  serializationFormatVersion: string;
  /** Interned strings */
  internedStrings: string[];
  internedMetaPointers: PBMetaPointer[];
  /** Interned languages */
  internedLanguages: PBLanguage[];
  nodes: PBNode[];
}

export interface PBLanguage {
  siKey?: number | undefined;
  siVersion?: number | undefined;
}

export interface PBNode {
  /** Yes, we should _not_ have null IDs, but if necessary we can represent them */
  siId?: number | undefined;
  mpiClassifier: number;
  properties: PBProperty[];
  containments: PBContainment[];
  references: PBReference[];
  /** This is a list of indexes representing the string values corresponding to the IDs of the annotations */
  siAnnotations: number[];
  siParent?: number | undefined;
}

export interface PBMetaPointer {
  /**
   * Instead of duplicating language+version as raw numbers everywhere,
   * point to the languages table.
   */
  liLanguage: number;
  /** concept/key within that language */
  siKey?: number | undefined;
}

export interface PBProperty {
  mpiMetaPointer: number;
  siValue?: number | undefined;
}

export interface PBContainment {
  mpiMetaPointer: number;
  siChildren: number[];
}

export interface PBReference {
  mpiMetaPointer: number;
  values: PBReferenceValue[];
}

export interface PBReferenceValue {
  siResolveInfo?: number | undefined;
  siReferred?: number | undefined;
}

function createBasePBChunk(): PBChunk {
  return {
    serializationFormatVersion: "",
    internedStrings: [],
    internedMetaPointers: [],
    internedLanguages: [],
    nodes: [],
  };
}

export const PBChunk = {
  encode(message: PBChunk, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.serializationFormatVersion !== "") {
      writer.uint32(10).string(message.serializationFormatVersion);
    }
    for (const v of message.internedStrings) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.internedMetaPointers) {
      PBMetaPointer.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.internedLanguages) {
      PBLanguage.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.nodes) {
      PBNode.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PBChunk {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serializationFormatVersion = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.internedStrings.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.internedMetaPointers.push(PBMetaPointer.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.internedLanguages.push(PBLanguage.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nodes.push(PBNode.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PBChunk {
    return {
      serializationFormatVersion: isSet(object.serializationFormatVersion)
        ? globalThis.String(object.serializationFormatVersion)
        : "",
      internedStrings: globalThis.Array.isArray(object?.internedStrings)
        ? object.internedStrings.map((e: any) => globalThis.String(e))
        : [],
      internedMetaPointers: globalThis.Array.isArray(object?.internedMetaPointers)
        ? object.internedMetaPointers.map((e: any) => PBMetaPointer.fromJSON(e))
        : [],
      internedLanguages: globalThis.Array.isArray(object?.internedLanguages)
        ? object.internedLanguages.map((e: any) => PBLanguage.fromJSON(e))
        : [],
      nodes: globalThis.Array.isArray(object?.nodes) ? object.nodes.map((e: any) => PBNode.fromJSON(e)) : [],
    };
  },

  toJSON(message: PBChunk): unknown {
    const obj: any = {};
    if (message.serializationFormatVersion !== "") {
      obj.serializationFormatVersion = message.serializationFormatVersion;
    }
    if (message.internedStrings?.length) {
      obj.internedStrings = message.internedStrings;
    }
    if (message.internedMetaPointers?.length) {
      obj.internedMetaPointers = message.internedMetaPointers.map((e) => PBMetaPointer.toJSON(e));
    }
    if (message.internedLanguages?.length) {
      obj.internedLanguages = message.internedLanguages.map((e) => PBLanguage.toJSON(e));
    }
    if (message.nodes?.length) {
      obj.nodes = message.nodes.map((e) => PBNode.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PBChunk>, I>>(base?: I): PBChunk {
    return PBChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PBChunk>, I>>(object: I): PBChunk {
    const message = createBasePBChunk();
    message.serializationFormatVersion = object.serializationFormatVersion ?? "";
    message.internedStrings = object.internedStrings?.map((e) => e) || [];
    message.internedMetaPointers = object.internedMetaPointers?.map((e) => PBMetaPointer.fromPartial(e)) || [];
    message.internedLanguages = object.internedLanguages?.map((e) => PBLanguage.fromPartial(e)) || [];
    message.nodes = object.nodes?.map((e) => PBNode.fromPartial(e)) || [];
    return message;
  },
};

function createBasePBLanguage(): PBLanguage {
  return { siKey: undefined, siVersion: undefined };
}

export const PBLanguage = {
  encode(message: PBLanguage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.siKey !== undefined) {
      writer.uint32(8).uint32(message.siKey);
    }
    if (message.siVersion !== undefined) {
      writer.uint32(16).uint32(message.siVersion);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PBLanguage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBLanguage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.siKey = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.siVersion = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PBLanguage {
    return {
      siKey: isSet(object.siKey) ? globalThis.Number(object.siKey) : undefined,
      siVersion: isSet(object.siVersion) ? globalThis.Number(object.siVersion) : undefined,
    };
  },

  toJSON(message: PBLanguage): unknown {
    const obj: any = {};
    if (message.siKey !== undefined) {
      obj.siKey = Math.round(message.siKey);
    }
    if (message.siVersion !== undefined) {
      obj.siVersion = Math.round(message.siVersion);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PBLanguage>, I>>(base?: I): PBLanguage {
    return PBLanguage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PBLanguage>, I>>(object: I): PBLanguage {
    const message = createBasePBLanguage();
    message.siKey = object.siKey ?? undefined;
    message.siVersion = object.siVersion ?? undefined;
    return message;
  },
};

function createBasePBNode(): PBNode {
  return {
    siId: undefined,
    mpiClassifier: 0,
    properties: [],
    containments: [],
    references: [],
    siAnnotations: [],
    siParent: undefined,
  };
}

export const PBNode = {
  encode(message: PBNode, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.siId !== undefined) {
      writer.uint32(8).uint32(message.siId);
    }
    if (message.mpiClassifier !== 0) {
      writer.uint32(16).uint32(message.mpiClassifier);
    }
    for (const v of message.properties) {
      PBProperty.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.containments) {
      PBContainment.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.references) {
      PBReference.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    writer.uint32(50).fork();
    for (const v of message.siAnnotations) {
      writer.uint32(v);
    }
    writer.ldelim();
    if (message.siParent !== undefined) {
      writer.uint32(56).uint32(message.siParent);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PBNode {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.siId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.mpiClassifier = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.properties.push(PBProperty.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.containments.push(PBContainment.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.references.push(PBReference.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag === 48) {
            message.siAnnotations.push(reader.uint32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.siAnnotations.push(reader.uint32());
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.siParent = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PBNode {
    return {
      siId: isSet(object.siId) ? globalThis.Number(object.siId) : undefined,
      mpiClassifier: isSet(object.mpiClassifier) ? globalThis.Number(object.mpiClassifier) : 0,
      properties: globalThis.Array.isArray(object?.properties)
        ? object.properties.map((e: any) => PBProperty.fromJSON(e))
        : [],
      containments: globalThis.Array.isArray(object?.containments)
        ? object.containments.map((e: any) => PBContainment.fromJSON(e))
        : [],
      references: globalThis.Array.isArray(object?.references)
        ? object.references.map((e: any) => PBReference.fromJSON(e))
        : [],
      siAnnotations: globalThis.Array.isArray(object?.siAnnotations)
        ? object.siAnnotations.map((e: any) => globalThis.Number(e))
        : [],
      siParent: isSet(object.siParent) ? globalThis.Number(object.siParent) : undefined,
    };
  },

  toJSON(message: PBNode): unknown {
    const obj: any = {};
    if (message.siId !== undefined) {
      obj.siId = Math.round(message.siId);
    }
    if (message.mpiClassifier !== 0) {
      obj.mpiClassifier = Math.round(message.mpiClassifier);
    }
    if (message.properties?.length) {
      obj.properties = message.properties.map((e) => PBProperty.toJSON(e));
    }
    if (message.containments?.length) {
      obj.containments = message.containments.map((e) => PBContainment.toJSON(e));
    }
    if (message.references?.length) {
      obj.references = message.references.map((e) => PBReference.toJSON(e));
    }
    if (message.siAnnotations?.length) {
      obj.siAnnotations = message.siAnnotations.map((e) => Math.round(e));
    }
    if (message.siParent !== undefined) {
      obj.siParent = Math.round(message.siParent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PBNode>, I>>(base?: I): PBNode {
    return PBNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PBNode>, I>>(object: I): PBNode {
    const message = createBasePBNode();
    message.siId = object.siId ?? undefined;
    message.mpiClassifier = object.mpiClassifier ?? 0;
    message.properties = object.properties?.map((e) => PBProperty.fromPartial(e)) || [];
    message.containments = object.containments?.map((e) => PBContainment.fromPartial(e)) || [];
    message.references = object.references?.map((e) => PBReference.fromPartial(e)) || [];
    message.siAnnotations = object.siAnnotations?.map((e) => e) || [];
    message.siParent = object.siParent ?? undefined;
    return message;
  },
};

function createBasePBMetaPointer(): PBMetaPointer {
  return { liLanguage: 0, siKey: undefined };
}

export const PBMetaPointer = {
  encode(message: PBMetaPointer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.liLanguage !== 0) {
      writer.uint32(8).uint32(message.liLanguage);
    }
    if (message.siKey !== undefined) {
      writer.uint32(16).uint32(message.siKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PBMetaPointer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBMetaPointer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.liLanguage = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.siKey = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PBMetaPointer {
    return {
      liLanguage: isSet(object.liLanguage) ? globalThis.Number(object.liLanguage) : 0,
      siKey: isSet(object.siKey) ? globalThis.Number(object.siKey) : undefined,
    };
  },

  toJSON(message: PBMetaPointer): unknown {
    const obj: any = {};
    if (message.liLanguage !== 0) {
      obj.liLanguage = Math.round(message.liLanguage);
    }
    if (message.siKey !== undefined) {
      obj.siKey = Math.round(message.siKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PBMetaPointer>, I>>(base?: I): PBMetaPointer {
    return PBMetaPointer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PBMetaPointer>, I>>(object: I): PBMetaPointer {
    const message = createBasePBMetaPointer();
    message.liLanguage = object.liLanguage ?? 0;
    message.siKey = object.siKey ?? undefined;
    return message;
  },
};

function createBasePBProperty(): PBProperty {
  return { mpiMetaPointer: 0, siValue: undefined };
}

export const PBProperty = {
  encode(message: PBProperty, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mpiMetaPointer !== 0) {
      writer.uint32(8).uint32(message.mpiMetaPointer);
    }
    if (message.siValue !== undefined) {
      writer.uint32(16).uint32(message.siValue);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PBProperty {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBProperty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mpiMetaPointer = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.siValue = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PBProperty {
    return {
      mpiMetaPointer: isSet(object.mpiMetaPointer) ? globalThis.Number(object.mpiMetaPointer) : 0,
      siValue: isSet(object.siValue) ? globalThis.Number(object.siValue) : undefined,
    };
  },

  toJSON(message: PBProperty): unknown {
    const obj: any = {};
    if (message.mpiMetaPointer !== 0) {
      obj.mpiMetaPointer = Math.round(message.mpiMetaPointer);
    }
    if (message.siValue !== undefined) {
      obj.siValue = Math.round(message.siValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PBProperty>, I>>(base?: I): PBProperty {
    return PBProperty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PBProperty>, I>>(object: I): PBProperty {
    const message = createBasePBProperty();
    message.mpiMetaPointer = object.mpiMetaPointer ?? 0;
    message.siValue = object.siValue ?? undefined;
    return message;
  },
};

function createBasePBContainment(): PBContainment {
  return { mpiMetaPointer: 0, siChildren: [] };
}

export const PBContainment = {
  encode(message: PBContainment, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mpiMetaPointer !== 0) {
      writer.uint32(8).uint32(message.mpiMetaPointer);
    }
    writer.uint32(18).fork();
    for (const v of message.siChildren) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PBContainment {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBContainment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mpiMetaPointer = reader.uint32();
          continue;
        case 2:
          if (tag === 16) {
            message.siChildren.push(reader.uint32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.siChildren.push(reader.uint32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PBContainment {
    return {
      mpiMetaPointer: isSet(object.mpiMetaPointer) ? globalThis.Number(object.mpiMetaPointer) : 0,
      siChildren: globalThis.Array.isArray(object?.siChildren)
        ? object.siChildren.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: PBContainment): unknown {
    const obj: any = {};
    if (message.mpiMetaPointer !== 0) {
      obj.mpiMetaPointer = Math.round(message.mpiMetaPointer);
    }
    if (message.siChildren?.length) {
      obj.siChildren = message.siChildren.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PBContainment>, I>>(base?: I): PBContainment {
    return PBContainment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PBContainment>, I>>(object: I): PBContainment {
    const message = createBasePBContainment();
    message.mpiMetaPointer = object.mpiMetaPointer ?? 0;
    message.siChildren = object.siChildren?.map((e) => e) || [];
    return message;
  },
};

function createBasePBReference(): PBReference {
  return { mpiMetaPointer: 0, values: [] };
}

export const PBReference = {
  encode(message: PBReference, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mpiMetaPointer !== 0) {
      writer.uint32(8).uint32(message.mpiMetaPointer);
    }
    for (const v of message.values) {
      PBReferenceValue.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PBReference {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mpiMetaPointer = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.values.push(PBReferenceValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PBReference {
    return {
      mpiMetaPointer: isSet(object.mpiMetaPointer) ? globalThis.Number(object.mpiMetaPointer) : 0,
      values: globalThis.Array.isArray(object?.values)
        ? object.values.map((e: any) => PBReferenceValue.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PBReference): unknown {
    const obj: any = {};
    if (message.mpiMetaPointer !== 0) {
      obj.mpiMetaPointer = Math.round(message.mpiMetaPointer);
    }
    if (message.values?.length) {
      obj.values = message.values.map((e) => PBReferenceValue.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PBReference>, I>>(base?: I): PBReference {
    return PBReference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PBReference>, I>>(object: I): PBReference {
    const message = createBasePBReference();
    message.mpiMetaPointer = object.mpiMetaPointer ?? 0;
    message.values = object.values?.map((e) => PBReferenceValue.fromPartial(e)) || [];
    return message;
  },
};

function createBasePBReferenceValue(): PBReferenceValue {
  return { siResolveInfo: undefined, siReferred: undefined };
}

export const PBReferenceValue = {
  encode(message: PBReferenceValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.siResolveInfo !== undefined) {
      writer.uint32(8).uint32(message.siResolveInfo);
    }
    if (message.siReferred !== undefined) {
      writer.uint32(16).uint32(message.siReferred);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PBReferenceValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBReferenceValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.siResolveInfo = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.siReferred = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PBReferenceValue {
    return {
      siResolveInfo: isSet(object.siResolveInfo) ? globalThis.Number(object.siResolveInfo) : undefined,
      siReferred: isSet(object.siReferred) ? globalThis.Number(object.siReferred) : undefined,
    };
  },

  toJSON(message: PBReferenceValue): unknown {
    const obj: any = {};
    if (message.siResolveInfo !== undefined) {
      obj.siResolveInfo = Math.round(message.siResolveInfo);
    }
    if (message.siReferred !== undefined) {
      obj.siReferred = Math.round(message.siReferred);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PBReferenceValue>, I>>(base?: I): PBReferenceValue {
    return PBReferenceValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PBReferenceValue>, I>>(object: I): PBReferenceValue {
    const message = createBasePBReferenceValue();
    message.siResolveInfo = object.siResolveInfo ?? undefined;
    message.siReferred = object.siReferred ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
